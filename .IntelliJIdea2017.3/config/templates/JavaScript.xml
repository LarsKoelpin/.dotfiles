<templateSet group="JavaScript">
  <template name="tsrrc" value="import * as React from 'react';&#10;import {connect} from 'react-redux';&#10;&#10;interface $name$Props {}&#10;interface $name$State {}&#10;&#10;class $name$ extends React.Component&lt;$name$Props, $name$State&gt; {&#10;&#10;    render() {&#10;        return (&#10;            &lt;div /&gt;&#10;        );&#10;    }&#10;}&#10;&#10;export default connect((state) =&gt; {&#10;  return {&#10;  &#10;  }&#10;})($name$);" description="Typescript React Redux Component" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="jsttst" value="import 'jest';&#10;&#10;import * as React from 'react';&#10;&#10;import { mount, shallow } from 'enzyme';&#10;&#10;describe('$SUITE_NAME$', () =&gt; {&#10;   it('$CASE_NAME$', () =&gt; {&#10;       &#10;   }) ;&#10;});&#10;" description="Jest Test" toReformat="false" toShortenFQNames="true">
    <variable name="SUITE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CASE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="statelesscomponent" value="import * as React from 'react';&#10;&#10;interface $name$Props {}&#10;&#10;const $name$ = (props: $name$Props) =&gt; (&#10;   &lt;div /&gt;&#10;)&#10;&#10;export default $name$;&#10;export {$name$}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>